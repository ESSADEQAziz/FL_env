2025-05-08 21:59:43,879 - v_central_server - INFO - Strating v_central_server ... 
2025-05-08 21:59:43,904 - v_central_server - INFO - Initilise the server with y_train torch.Size([3150, 2]) y_test torch.Size([788, 2])//// tensor([[0., 1.],
        [0., 1.],
        [0., 1.],
        ...,
        [1., 0.],
        [1., 0.],
        [0., 1.]]) ////tensor([[0., 1.],
        [1., 0.],
        [0., 1.],
        ...,
        [0., 1.],
        [1., 0.],
        [1., 0.]])
2025-05-08 21:59:43,922 - flwr - WARNING - DEPRECATED FEATURE: flwr.server.start_server() is deprecated.
	Instead, use the `flower-superlink` CLI command to start a SuperLink as shown below:

		$ flower-superlink --insecure

	To view usage and all available options, run:

		$ flower-superlink --help

	Using `start_server()` is deprecated.

            This is a deprecated feature. It will be removed
            entirely in future versions of Flower.
        
2025-05-08 21:59:43,924 - flwr - INFO - Starting Flower server, config: num_rounds=50, no round_timeout
2025-05-08 21:59:43,942 - flwr - INFO - Flower ECE: gRPC server running (50 rounds), SSL is disabled
2025-05-08 21:59:43,943 - flwr - INFO - [INIT]
2025-05-08 21:59:43,944 - flwr - INFO - Requesting initial parameters from one random client
2025-05-08 21:59:55,671 - flwr - INFO - Received initial parameters from one random client
2025-05-08 21:59:55,672 - flwr - INFO - Starting evaluation of initial global parameters
2025-05-08 21:59:55,672 - flwr - INFO - Evaluation returned no results (`None`)
2025-05-08 21:59:55,673 - flwr - INFO - 
2025-05-08 21:59:55,673 - flwr - INFO - [ROUND 1]
2025-05-08 22:00:01,007 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:00:01,020 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:00:01,021 - v_central_server - WARNING - the received parameters from node 2  /// after : [[-0.5440564 ]
 [-0.5440564 ]
 [ 0.2277497 ]
 ...
 [ 0.44414353]
 [-0.5440564 ]
 [ 1.431052  ]]
2025-05-08 22:00:01,022 - v_central_server - WARNING - the received parameters from node 1  /// after : [[ 0.3061796 ]
 [-0.6375141 ]
 [-0.27669007]
 ...
 [ 0.6114923 ]
 [-0.30444574]
 [-0.11015587]]
2025-05-08 22:00:01,024 - v_central_server - INFO -  (Aggregate fit) round= 1 the resulting embedding map is : {'2': tensor([[-0.5441],
        [-0.5441],
        [ 0.2277],
        ...,
        [ 0.4441],
        [-0.5441],
        [ 1.4311]], requires_grad=True), '1': tensor([[ 0.3062],
        [-0.6375],
        [-0.2767],
        ...,
        [ 0.6115],
        [-0.3044],
        [-0.1102]], requires_grad=True)}
2025-05-08 22:00:01,025 - v_central_server - INFO -  (round = 1) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[ 0.3062, -0.5441],
        [-0.6375, -0.5441],
        [-0.2767,  0.2277],
        ...,
        [ 1.0278,  0.4441],
        [ 0.6670,  0.2277],
        [ 0.2784,  0.2277]], grad_fn=<SliceBackward0>) ////tensor([[-0.0546,  0.2277],
        [ 0.3339,  1.4311],
        [-0.0269,  0.2277],
        ...,
        [ 0.6115,  0.4441],
        [-0.3044, -0.5441],
        [-0.1102,  1.4311]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:10,724 - v_central_server - INFO - Strating v_central_server ... 
2025-05-08 22:07:10,755 - v_central_server - INFO - Initilise the server with y_train torch.Size([3150, 2]) y_test torch.Size([788, 2])//// tensor([[0., 1.],
        [0., 1.],
        [0., 1.],
        ...,
        [1., 0.],
        [1., 0.],
        [0., 1.]]) ////tensor([[0., 1.],
        [1., 0.],
        [0., 1.],
        ...,
        [0., 1.],
        [1., 0.],
        [1., 0.]])
2025-05-08 22:07:10,756 - flwr - WARNING - DEPRECATED FEATURE: flwr.server.start_server() is deprecated.
	Instead, use the `flower-superlink` CLI command to start a SuperLink as shown below:

		$ flower-superlink --insecure

	To view usage and all available options, run:

		$ flower-superlink --help

	Using `start_server()` is deprecated.

            This is a deprecated feature. It will be removed
            entirely in future versions of Flower.
        
2025-05-08 22:07:10,758 - flwr - INFO - Starting Flower server, config: num_rounds=50, no round_timeout
2025-05-08 22:07:10,781 - flwr - INFO - Flower ECE: gRPC server running (50 rounds), SSL is disabled
2025-05-08 22:07:10,782 - flwr - INFO - [INIT]
2025-05-08 22:07:10,783 - flwr - INFO - Requesting initial parameters from one random client
2025-05-08 22:07:12,768 - flwr - INFO - Received initial parameters from one random client
2025-05-08 22:07:12,769 - flwr - INFO - Starting evaluation of initial global parameters
2025-05-08 22:07:12,770 - flwr - INFO - Evaluation returned no results (`None`)
2025-05-08 22:07:12,770 - flwr - INFO - 
2025-05-08 22:07:12,771 - flwr - INFO - [ROUND 1]
2025-05-08 22:07:19,855 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:19,868 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:19,870 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32746807]
 [ 0.32746807]
 [ 1.2643614 ]
 ...
 [-0.9476417 ]
 [ 0.32746807]
 [ 0.42937708]]
2025-05-08 22:07:19,873 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20099767]
 [ 0.41850877]
 [ 0.18163866]
 ...
 [-0.4014262 ]
 [ 0.19985944]
 [ 0.07231399]]
2025-05-08 22:07:19,877 - v_central_server - INFO -  (Aggregate fit) round= 1 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2010],
        [ 0.4185],
        [ 0.1816],
        ...,
        [-0.4014],
        [ 0.1999],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:19,880 - v_central_server - INFO -  (round = 1) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2010,  0.3275],
        [ 0.4185,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6747, -0.9476],
        [-0.4379,  1.2644],
        [-0.1828,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2192,  0.4294],
        [ 0.0177,  1.2644],
        ...,
        [-0.4014, -0.9476],
        [ 0.1999,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:19,883 - v_central_server - INFO - (round = 1) the output_train tensor([[ 0.2855,  0.3544],
        [ 0.0038,  0.0105],
        [ 0.7239,  0.7670],
        ...,
        [-0.3326, -0.2333],
        [ 1.0056,  1.1109],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8479],
        [ 0.3604,  0.4325],
        [ 0.7985,  0.8580],
        ...,
        [-0.4568, -0.3851],
        [ 0.1032,  0.1319],
        [ 0.2278,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:19,885 - v_central_server - INFO - Server round 1 - Loss: 0.6898047924041748 - Accuracy: 0.5622
2025-05-08 22:07:19,889 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:19,913 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,315 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,316 - flwr - WARNING - No evaluate_metrics_aggregation_fn provided
2025-05-08 22:07:20,316 - flwr - INFO - 
2025-05-08 22:07:20,317 - flwr - INFO - [ROUND 2]
2025-05-08 22:07:20,318 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,330 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,332 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274692 ]
 [ 0.3274692 ]
 [ 1.2643664 ]
 ...
 [-0.947639  ]
 [ 0.3274692 ]
 [ 0.42937815]]
2025-05-08 22:07:20,332 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.2009808 ]
 [ 0.41847366]
 [ 0.18162343]
 ...
 [-0.40139255]
 [ 0.19984268]
 [ 0.07230793]]
2025-05-08 22:07:20,334 - v_central_server - INFO -  (Aggregate fit) round= 2 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2010],
        [ 0.4185],
        [ 0.1816],
        ...,
        [-0.4014],
        [ 0.1998],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,335 - v_central_server - INFO -  (round = 2) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2010,  0.3275],
        [ 0.4185,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6747, -0.9476],
        [-0.4378,  1.2644],
        [-0.1828,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2192,  0.4294],
        [ 0.0177,  1.2644],
        ...,
        [-0.4014, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,336 - v_central_server - INFO - (round = 2) the output_train tensor([[ 0.2855,  0.3544],
        [ 0.0038,  0.0105],
        [ 0.7239,  0.7670],
        ...,
        [-0.3326, -0.2334],
        [ 1.0056,  1.1109],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8479],
        [ 0.3604,  0.4325],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3851],
        [ 0.1032,  0.1319],
        [ 0.2278,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,338 - v_central_server - INFO - Server round 2 - Loss: 0.6898046731948853 - Accuracy: 0.5622
2025-05-08 22:07:20,339 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,346 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,368 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,369 - flwr - INFO - 
2025-05-08 22:07:20,370 - flwr - INFO - [ROUND 3]
2025-05-08 22:07:20,370 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,382 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,383 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747033]
 [ 0.32747033]
 [ 1.2643714 ]
 ...
 [-0.9476363 ]
 [ 0.32747033]
 [ 0.42937922]]
2025-05-08 22:07:20,384 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20096394]
 [ 0.41843858]
 [ 0.1816082 ]
 ...
 [-0.40135887]
 [ 0.19982591]
 [ 0.07230186]]
2025-05-08 22:07:20,386 - v_central_server - INFO -  (Aggregate fit) round= 3 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2010],
        [ 0.4184],
        [ 0.1816],
        ...,
        [-0.4014],
        [ 0.1998],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,387 - v_central_server - INFO -  (round = 3) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2010,  0.3275],
        [ 0.4184,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6746, -0.9476],
        [-0.4378,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2192,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4014, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,390 - v_central_server - INFO - (round = 3) the output_train tensor([[ 0.2855,  0.3544],
        [ 0.0039,  0.0106],
        [ 0.7239,  0.7671],
        ...,
        [-0.3326, -0.2334],
        [ 1.0056,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8479],
        [ 0.3604,  0.4325],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3851],
        [ 0.1033,  0.1319],
        [ 0.2278,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,392 - v_central_server - INFO - Server round 3 - Loss: 0.6898046135902405 - Accuracy: 0.5622
2025-05-08 22:07:20,393 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,399 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,418 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,418 - flwr - INFO - 
2025-05-08 22:07:20,419 - flwr - INFO - [ROUND 4]
2025-05-08 22:07:20,419 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,432 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,433 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747146]
 [ 0.32747146]
 [ 1.2643764 ]
 ...
 [-0.9476336 ]
 [ 0.32747146]
 [ 0.4293803 ]]
2025-05-08 22:07:20,434 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20094709]
 [ 0.41840348]
 [ 0.18159296]
 ...
 [-0.40132523]
 [ 0.19980915]
 [ 0.0722958 ]]
2025-05-08 22:07:20,435 - v_central_server - INFO -  (Aggregate fit) round= 4 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2009],
        [ 0.4184],
        [ 0.1816],
        ...,
        [-0.4013],
        [ 0.1998],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,436 - v_central_server - INFO -  (round = 4) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4184,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6746, -0.9476],
        [-0.4378,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2192,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4013, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,437 - v_central_server - INFO - (round = 4) the output_train tensor([[ 0.2855,  0.3543],
        [ 0.0039,  0.0106],
        [ 0.7239,  0.7671],
        ...,
        [-0.3326, -0.2334],
        [ 1.0055,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8479],
        [ 0.3604,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3851],
        [ 0.1033,  0.1319],
        [ 0.2278,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,439 - v_central_server - INFO - Server round 4 - Loss: 0.6898046135902405 - Accuracy: 0.5622
2025-05-08 22:07:20,441 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,448 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,472 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,474 - flwr - INFO - 
2025-05-08 22:07:20,475 - flwr - INFO - [ROUND 5]
2025-05-08 22:07:20,476 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,486 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,487 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274726 ]
 [ 0.3274726 ]
 [ 1.2643814 ]
 ...
 [-0.94763094]
 [ 0.3274726 ]
 [ 0.42938137]]
2025-05-08 22:07:20,491 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20093024]
 [ 0.41836837]
 [ 0.18157773]
 ...
 [-0.40129155]
 [ 0.19979239]
 [ 0.07228974]]
2025-05-08 22:07:20,493 - v_central_server - INFO -  (Aggregate fit) round= 5 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2009],
        [ 0.4184],
        [ 0.1816],
        ...,
        [-0.4013],
        [ 0.1998],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,494 - v_central_server - INFO -  (round = 5) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4184,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6745, -0.9476],
        [-0.4377,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4013, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,495 - v_central_server - INFO - (round = 5) the output_train tensor([[ 0.2855,  0.3543],
        [ 0.0039,  0.0106],
        [ 0.7240,  0.7671],
        ...,
        [-0.3327, -0.2335],
        [ 1.0055,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3604,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3851],
        [ 0.1033,  0.1319],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,496 - v_central_server - INFO - Server round 5 - Loss: 0.6898045539855957 - Accuracy: 0.5622
2025-05-08 22:07:20,497 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,502 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,525 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,526 - flwr - INFO - 
2025-05-08 22:07:20,526 - flwr - INFO - [ROUND 6]
2025-05-08 22:07:20,527 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,536 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,537 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20091338]
 [ 0.4183333 ]
 [ 0.1815625 ]
 ...
 [-0.40125787]
 [ 0.19977562]
 [ 0.07228368]]
2025-05-08 22:07:20,539 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747373]
 [ 0.32747373]
 [ 1.2643864 ]
 ...
 [-0.94762826]
 [ 0.32747373]
 [ 0.42938244]]
2025-05-08 22:07:20,540 - v_central_server - INFO -  (Aggregate fit) round= 6 the resulting embedding map is : {'1': tensor([[-0.2009],
        [ 0.4183],
        [ 0.1816],
        ...,
        [-0.4013],
        [ 0.1998],
        [ 0.0723]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:20,541 - v_central_server - INFO -  (round = 6) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4183,  0.3275],
        [ 0.1816,  1.2644],
        ...,
        [-0.6745, -0.9476],
        [-0.4377,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4013, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,542 - v_central_server - INFO - (round = 6) the output_train tensor([[ 0.2855,  0.3543],
        [ 0.0039,  0.0106],
        [ 0.7240,  0.7671],
        ...,
        [-0.3327, -0.2335],
        [ 1.0055,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3604,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3851],
        [ 0.1033,  0.1319],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,543 - v_central_server - INFO - Server round 6 - Loss: 0.6898045539855957 - Accuracy: 0.5622
2025-05-08 22:07:20,544 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,548 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,568 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,569 - flwr - INFO - 
2025-05-08 22:07:20,569 - flwr - INFO - [ROUND 7]
2025-05-08 22:07:20,570 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,581 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,582 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20089652]
 [ 0.41829818]
 [ 0.18154727]
 ...
 [-0.40122423]
 [ 0.19975887]
 [ 0.07227761]]
2025-05-08 22:07:20,583 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747486]
 [ 0.32747486]
 [ 1.2643914 ]
 ...
 [-0.9476256 ]
 [ 0.32747486]
 [ 0.42938352]]
2025-05-08 22:07:20,585 - v_central_server - INFO -  (Aggregate fit) round= 7 the resulting embedding map is : {'1': tensor([[-0.2009],
        [ 0.4183],
        [ 0.1815],
        ...,
        [-0.4012],
        [ 0.1998],
        [ 0.0723]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:20,586 - v_central_server - INFO -  (round = 7) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4183,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6744, -0.9476],
        [-0.4376,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4012, -0.9476],
        [ 0.1998,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,587 - v_central_server - INFO - (round = 7) the output_train tensor([[ 0.2855,  0.3543],
        [ 0.0039,  0.0106],
        [ 0.7240,  0.7671],
        ...,
        [-0.3327, -0.2335],
        [ 1.0055,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3852],
        [ 0.1033,  0.1319],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,588 - v_central_server - INFO - Server round 7 - Loss: 0.6898044347763062 - Accuracy: 0.5622
2025-05-08 22:07:20,590 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,596 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,617 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,617 - flwr - INFO - 
2025-05-08 22:07:20,618 - flwr - INFO - [ROUND 8]
2025-05-08 22:07:20,618 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,629 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,630 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.327476 ]
 [ 0.327476 ]
 [ 1.2643964]
 ...
 [-0.9476229]
 [ 0.327476 ]
 [ 0.4293846]]
2025-05-08 22:07:20,631 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20087966]
 [ 0.41826308]
 [ 0.18153203]
 ...
 [-0.40119055]
 [ 0.19974211]
 [ 0.07227155]]
2025-05-08 22:07:20,632 - v_central_server - INFO -  (Aggregate fit) round= 8 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2009],
        [ 0.4183],
        [ 0.1815],
        ...,
        [-0.4012],
        [ 0.1997],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,633 - v_central_server - INFO -  (round = 8) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4183,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6743, -0.9476],
        [-0.4376,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0359,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4012, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,634 - v_central_server - INFO - (round = 8) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0039,  0.0107],
        [ 0.7240,  0.7671],
        ...,
        [-0.3327, -0.2336],
        [ 1.0055,  1.1108],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3852],
        [ 0.1033,  0.1319],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,635 - v_central_server - INFO - Server round 8 - Loss: 0.6898043751716614 - Accuracy: 0.5622
2025-05-08 22:07:20,636 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,642 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,664 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,664 - flwr - INFO - 
2025-05-08 22:07:20,665 - flwr - INFO - [ROUND 9]
2025-05-08 22:07:20,665 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,675 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,676 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747713]
 [ 0.32747713]
 [ 1.2644014 ]
 ...
 [-0.9476202 ]
 [ 0.32747713]
 [ 0.42938566]]
2025-05-08 22:07:20,677 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20086281]
 [ 0.418228  ]
 [ 0.1815168 ]
 ...
 [-0.40115687]
 [ 0.19972534]
 [ 0.07226548]]
2025-05-08 22:07:20,679 - v_central_server - INFO -  (Aggregate fit) round= 9 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2009],
        [ 0.4182],
        [ 0.1815],
        ...,
        [-0.4012],
        [ 0.1997],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,680 - v_central_server - INFO -  (round = 9) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2009,  0.3275],
        [ 0.4182,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6743, -0.9476],
        [-0.4376,  1.2644],
        [-0.1827,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4012, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,681 - v_central_server - INFO - (round = 9) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0107],
        [ 0.7240,  0.7671],
        ...,
        [-0.3328, -0.2336],
        [ 1.0055,  1.1107],
        [ 0.8896,  0.9693]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4569, -0.3852],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,682 - v_central_server - INFO - Server round 9 - Loss: 0.6898043155670166 - Accuracy: 0.5622
2025-05-08 22:07:20,683 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,686 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,707 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,708 - flwr - INFO - 
2025-05-08 22:07:20,709 - flwr - INFO - [ROUND 10]
2025-05-08 22:07:20,710 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,717 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,718 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32747826]
 [ 0.32747826]
 [ 1.2644064 ]
 ...
 [-0.94761753]
 [ 0.32747826]
 [ 0.42938673]]
2025-05-08 22:07:20,718 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20084596]
 [ 0.4181929 ]
 [ 0.18150157]
 ...
 [-0.40112323]
 [ 0.19970858]
 [ 0.07225942]]
2025-05-08 22:07:20,720 - v_central_server - INFO -  (Aggregate fit) round= 10 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2008],
        [ 0.4182],
        [ 0.1815],
        ...,
        [-0.4011],
        [ 0.1997],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,722 - v_central_server - INFO -  (round = 10) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4182,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6742, -0.9476],
        [-0.4375,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2191,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4011, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,724 - v_central_server - INFO - (round = 10) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0107],
        [ 0.7240,  0.7671],
        ...,
        [-0.3328, -0.2336],
        [ 1.0055,  1.1107],
        [ 0.8896,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3852],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,725 - v_central_server - INFO - Server round 10 - Loss: 0.6898041367530823 - Accuracy: 0.5622
2025-05-08 22:07:20,726 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,730 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,750 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,750 - flwr - INFO - 
2025-05-08 22:07:20,751 - flwr - INFO - [ROUND 11]
2025-05-08 22:07:20,751 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,762 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,763 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274794 ]
 [ 0.3274794 ]
 [ 1.2644114 ]
 ...
 [-0.94761485]
 [ 0.3274794 ]
 [ 0.4293878 ]]
2025-05-08 22:07:20,764 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20082909]
 [ 0.4181578 ]
 [ 0.18148632]
 ...
 [-0.40108955]
 [ 0.19969182]
 [ 0.07225335]]
2025-05-08 22:07:20,765 - v_central_server - INFO -  (Aggregate fit) round= 11 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2008],
        [ 0.4182],
        [ 0.1815],
        ...,
        [-0.4011],
        [ 0.1997],
        [ 0.0723]], requires_grad=True)}
2025-05-08 22:07:20,766 - v_central_server - INFO -  (round = 11) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4182,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6742, -0.9476],
        [-0.4375,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2190,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4011, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0723,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,767 - v_central_server - INFO - (round = 11) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0107],
        [ 0.7240,  0.7671],
        ...,
        [-0.3328, -0.2336],
        [ 1.0054,  1.1107],
        [ 0.8896,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3852],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,768 - v_central_server - INFO - Server round 11 - Loss: 0.6898040771484375 - Accuracy: 0.5622
2025-05-08 22:07:20,769 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,775 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,795 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,795 - flwr - INFO - 
2025-05-08 22:07:20,796 - flwr - INFO - [ROUND 12]
2025-05-08 22:07:20,796 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,803 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,805 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20081224]
 [ 0.41812268]
 [ 0.1814711 ]
 ...
 [-0.4010559 ]
 [ 0.19967507]
 [ 0.07224729]]
2025-05-08 22:07:20,806 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748052]
 [ 0.32748052]
 [ 1.2644165 ]
 ...
 [-0.94761217]
 [ 0.32748052]
 [ 0.42938888]]
2025-05-08 22:07:20,809 - v_central_server - INFO -  (Aggregate fit) round= 12 the resulting embedding map is : {'1': tensor([[-0.2008],
        [ 0.4181],
        [ 0.1815],
        ...,
        [-0.4011],
        [ 0.1997],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:20,811 - v_central_server - INFO -  (round = 12) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4181,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6741, -0.9476],
        [-0.4375,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2190,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4011, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,812 - v_central_server - INFO - (round = 12) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0107],
        [ 0.7240,  0.7672],
        ...,
        [-0.3328, -0.2337],
        [ 1.0054,  1.1107],
        [ 0.8896,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3852],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,813 - v_central_server - INFO - Server round 12 - Loss: 0.6898040771484375 - Accuracy: 0.5622
2025-05-08 22:07:20,814 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,818 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,841 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,842 - flwr - INFO - 
2025-05-08 22:07:20,842 - flwr - INFO - [ROUND 13]
2025-05-08 22:07:20,843 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,852 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,853 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748166]
 [ 0.32748166]
 [ 1.2644215 ]
 ...
 [-0.9476095 ]
 [ 0.32748166]
 [ 0.42938995]]
2025-05-08 22:07:20,855 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20079538]
 [ 0.4180876 ]
 [ 0.18145587]
 ...
 [-0.40102223]
 [ 0.1996583 ]
 [ 0.07224122]]
2025-05-08 22:07:20,858 - v_central_server - INFO -  (Aggregate fit) round= 13 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2008],
        [ 0.4181],
        [ 0.1815],
        ...,
        [-0.4010],
        [ 0.1997],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:20,859 - v_central_server - INFO -  (round = 13) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4181,  0.3275],
        [ 0.1815,  1.2644],
        ...,
        [-0.6741, -0.9476],
        [-0.4374,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2190,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4010, -0.9476],
        [ 0.1997,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,861 - v_central_server - INFO - (round = 13) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0108],
        [ 0.7240,  0.7672],
        ...,
        [-0.3329, -0.2337],
        [ 1.0054,  1.1107],
        [ 0.8896,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3853],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,861 - v_central_server - INFO - Server round 13 - Loss: 0.6898040771484375 - Accuracy: 0.5622
2025-05-08 22:07:20,862 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,866 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,888 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,889 - flwr - INFO - 
2025-05-08 22:07:20,890 - flwr - INFO - [ROUND 14]
2025-05-08 22:07:20,891 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,899 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,900 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20077853]
 [ 0.4180525 ]
 [ 0.18144064]
 ...
 [-0.40098855]
 [ 0.19964154]
 [ 0.07223516]]
2025-05-08 22:07:20,901 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274828 ]
 [ 0.3274828 ]
 [ 1.2644265 ]
 ...
 [-0.9476068 ]
 [ 0.3274828 ]
 [ 0.42939103]]
2025-05-08 22:07:20,902 - v_central_server - INFO -  (Aggregate fit) round= 14 the resulting embedding map is : {'1': tensor([[-0.2008],
        [ 0.4181],
        [ 0.1814],
        ...,
        [-0.4010],
        [ 0.1996],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:20,903 - v_central_server - INFO -  (round = 14) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4181,  0.3275],
        [ 0.1814,  1.2644],
        ...,
        [-0.6740, -0.9476],
        [-0.4374,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2190,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4010, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,905 - v_central_server - INFO - (round = 14) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0040,  0.0108],
        [ 0.7240,  0.7672],
        ...,
        [-0.3329, -0.2337],
        [ 1.0054,  1.1107],
        [ 0.8896,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7902,  0.8480],
        [ 0.3603,  0.4324],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3853],
        [ 0.1033,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,907 - v_central_server - INFO - Server round 14 - Loss: 0.6898038983345032 - Accuracy: 0.5622
2025-05-08 22:07:20,908 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,912 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,940 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,940 - flwr - INFO - 
2025-05-08 22:07:20,941 - flwr - INFO - [ROUND 15]
2025-05-08 22:07:20,942 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,950 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,951 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748392]
 [ 0.32748392]
 [ 1.2644315 ]
 ...
 [-0.9476041 ]
 [ 0.32748392]
 [ 0.4293921 ]]
2025-05-08 22:07:20,951 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20076168]
 [ 0.4180174 ]
 [ 0.1814254 ]
 ...
 [-0.4009549 ]
 [ 0.19962478]
 [ 0.07222909]]
2025-05-08 22:07:20,953 - v_central_server - INFO -  (Aggregate fit) round= 15 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2008],
        [ 0.4180],
        [ 0.1814],
        ...,
        [-0.4010],
        [ 0.1996],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:20,955 - v_central_server - INFO -  (round = 15) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2008,  0.3275],
        [ 0.4180,  0.3275],
        [ 0.1814,  1.2644],
        ...,
        [-0.6739, -0.9476],
        [-0.4374,  1.2644],
        [-0.1826,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2190,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4010, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:20,957 - v_central_server - INFO - (round = 15) the output_train tensor([[ 0.2854,  0.3543],
        [ 0.0041,  0.0108],
        [ 0.7241,  0.7672],
        ...,
        [-0.3329, -0.2338],
        [ 1.0054,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3603,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3853],
        [ 0.1034,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:20,958 - v_central_server - INFO - Server round 15 - Loss: 0.6898038983345032 - Accuracy: 0.5622
2025-05-08 22:07:20,959 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:20,963 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,983 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:20,983 - flwr - INFO - 
2025-05-08 22:07:20,984 - flwr - INFO - [ROUND 16]
2025-05-08 22:07:20,984 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:20,995 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:20,996 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20074481]
 [ 0.4179823 ]
 [ 0.18141016]
 ...
 [-0.40092123]
 [ 0.19960801]
 [ 0.07222303]]
2025-05-08 22:07:20,997 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748505]
 [ 0.32748505]
 [ 1.2644365 ]
 ...
 [-0.94760144]
 [ 0.32748505]
 [ 0.42939317]]
2025-05-08 22:07:20,998 - v_central_server - INFO -  (Aggregate fit) round= 16 the resulting embedding map is : {'1': tensor([[-0.2007],
        [ 0.4180],
        [ 0.1814],
        ...,
        [-0.4009],
        [ 0.1996],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:20,999 - v_central_server - INFO -  (round = 16) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4180,  0.3275],
        [ 0.1814,  1.2644],
        ...,
        [-0.6739, -0.9476],
        [-0.4373,  1.2644],
        [-0.1825,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4009, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,000 - v_central_server - INFO - (round = 16) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0041,  0.0108],
        [ 0.7241,  0.7672],
        ...,
        [-0.3329, -0.2338],
        [ 1.0054,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3603,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4570, -0.3853],
        [ 0.1034,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,001 - v_central_server - INFO - Server round 16 - Loss: 0.6898038387298584 - Accuracy: 0.5622
2025-05-08 22:07:21,002 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,008 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,027 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,027 - flwr - INFO - 
2025-05-08 22:07:21,028 - flwr - INFO - [ROUND 17]
2025-05-08 22:07:21,028 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,036 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,038 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274862 ]
 [ 0.3274862 ]
 [ 1.2644415 ]
 ...
 [-0.94759876]
 [ 0.3274862 ]
 [ 0.42939425]]
2025-05-08 22:07:21,040 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20072795]
 [ 0.4179472 ]
 [ 0.18139493]
 ...
 [-0.40088755]
 [ 0.19959125]
 [ 0.07221697]]
2025-05-08 22:07:21,041 - v_central_server - INFO -  (Aggregate fit) round= 17 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2007],
        [ 0.4179],
        [ 0.1814],
        ...,
        [-0.4009],
        [ 0.1996],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,043 - v_central_server - INFO -  (round = 17) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4179,  0.3275],
        [ 0.1814,  1.2644],
        ...,
        [-0.6738, -0.9476],
        [-0.4373,  1.2644],
        [-0.1825,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4009, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,044 - v_central_server - INFO - (round = 17) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0041,  0.0108],
        [ 0.7241,  0.7672],
        ...,
        [-0.3330, -0.2338],
        [ 1.0054,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3603,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4571, -0.3853],
        [ 0.1034,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,045 - v_central_server - INFO - Server round 17 - Loss: 0.6898037791252136 - Accuracy: 0.5622
2025-05-08 22:07:21,046 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,049 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,068 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,069 - flwr - INFO - 
2025-05-08 22:07:21,069 - flwr - INFO - [ROUND 18]
2025-05-08 22:07:21,070 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,081 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,082 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748732]
 [ 0.32748732]
 [ 1.2644465 ]
 ...
 [-0.9475961 ]
 [ 0.32748732]
 [ 0.42939532]]
2025-05-08 22:07:21,083 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.2007111]
 [ 0.4179121]
 [ 0.1813797]
 ...
 [-0.4008539]
 [ 0.1995745]
 [ 0.0722109]]
2025-05-08 22:07:21,085 - v_central_server - INFO -  (Aggregate fit) round= 18 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2644],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2007],
        [ 0.4179],
        [ 0.1814],
        ...,
        [-0.4009],
        [ 0.1996],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,086 - v_central_server - INFO -  (round = 18) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4179,  0.3275],
        [ 0.1814,  1.2644],
        ...,
        [-0.6738, -0.9476],
        [-0.4372,  1.2644],
        [-0.1825,  1.2644]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2644],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2644],
        ...,
        [-0.4009, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,087 - v_central_server - INFO - (round = 18) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0041,  0.0109],
        [ 0.7241,  0.7672],
        ...,
        [-0.3330, -0.2339],
        [ 1.0054,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3603,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4571, -0.3853],
        [ 0.1034,  0.1320],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,089 - v_central_server - INFO - Server round 18 - Loss: 0.6898036003112793 - Accuracy: 0.5622
2025-05-08 22:07:21,090 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,095 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,117 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,118 - flwr - INFO - 
2025-05-08 22:07:21,118 - flwr - INFO - [ROUND 19]
2025-05-08 22:07:21,119 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,129 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,130 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748845]
 [ 0.32748845]
 [ 1.2644515 ]
 ...
 [-0.9475934 ]
 [ 0.32748845]
 [ 0.4293964 ]]
2025-05-08 22:07:21,131 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20069425]
 [ 0.41787702]
 [ 0.18136446]
 ...
 [-0.40082023]
 [ 0.19955774]
 [ 0.07220484]]
2025-05-08 22:07:21,133 - v_central_server - INFO -  (Aggregate fit) round= 19 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2007],
        [ 0.4179],
        [ 0.1814],
        ...,
        [-0.4008],
        [ 0.1996],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,134 - v_central_server - INFO -  (round = 19) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4179,  0.3275],
        [ 0.1814,  1.2645],
        ...,
        [-0.6737, -0.9476],
        [-0.4372,  1.2645],
        [-0.1825,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4008, -0.9476],
        [ 0.1996,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,136 - v_central_server - INFO - (round = 19) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0041,  0.0109],
        [ 0.7241,  0.7672],
        ...,
        [-0.3330, -0.2339],
        [ 1.0053,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3603,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4571, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,137 - v_central_server - INFO - Server round 19 - Loss: 0.6898036003112793 - Accuracy: 0.5622
2025-05-08 22:07:21,139 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,145 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,166 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,166 - flwr - INFO - 
2025-05-08 22:07:21,166 - flwr - INFO - [ROUND 20]
2025-05-08 22:07:21,167 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,178 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,178 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20067738]
 [ 0.4178419 ]
 [ 0.18134923]
 ...
 [-0.40078658]
 [ 0.19954097]
 [ 0.07219877]]
2025-05-08 22:07:21,179 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32748958]
 [ 0.32748958]
 [ 1.2644565 ]
 ...
 [-0.9475907 ]
 [ 0.32748958]
 [ 0.42939746]]
2025-05-08 22:07:21,180 - v_central_server - INFO -  (Aggregate fit) round= 20 the resulting embedding map is : {'1': tensor([[-0.2007],
        [ 0.4178],
        [ 0.1813],
        ...,
        [-0.4008],
        [ 0.1995],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,181 - v_central_server - INFO -  (round = 20) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4178,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6737, -0.9476],
        [-0.4372,  1.2645],
        [-0.1825,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4008, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,182 - v_central_server - INFO - (round = 20) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0041,  0.0109],
        [ 0.7241,  0.7673],
        ...,
        [-0.3330, -0.2339],
        [ 1.0053,  1.1106],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3602,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4571, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,183 - v_central_server - INFO - Server round 20 - Loss: 0.689803421497345 - Accuracy: 0.5622
2025-05-08 22:07:21,184 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,190 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,214 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,215 - flwr - INFO - 
2025-05-08 22:07:21,216 - flwr - INFO - [ROUND 21]
2025-05-08 22:07:21,216 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,229 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,231 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749072]
 [ 0.32749072]
 [ 1.2644615 ]
 ...
 [-0.947588  ]
 [ 0.32749072]
 [ 0.42939854]]
2025-05-08 22:07:21,231 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20066053]
 [ 0.4178068 ]
 [ 0.181334  ]
 ...
 [-0.4007529 ]
 [ 0.19952421]
 [ 0.07219271]]
2025-05-08 22:07:21,233 - v_central_server - INFO -  (Aggregate fit) round= 21 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2007],
        [ 0.4178],
        [ 0.1813],
        ...,
        [-0.4008],
        [ 0.1995],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,235 - v_central_server - INFO -  (round = 21) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2007,  0.3275],
        [ 0.4178,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6736, -0.9476],
        [-0.4371,  1.2645],
        [-0.1825,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2189,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4008, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,236 - v_central_server - INFO - (round = 21) the output_train tensor([[ 0.2854,  0.3542],
        [ 0.0042,  0.0109],
        [ 0.7241,  0.7673],
        ...,
        [-0.3331, -0.2339],
        [ 1.0053,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3602,  0.4323],
        [ 0.7985,  0.8581],
        ...,
        [-0.4571, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,239 - v_central_server - INFO - Server round 21 - Loss: 0.6898033022880554 - Accuracy: 0.5622
2025-05-08 22:07:21,240 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,245 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,280 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,280 - flwr - INFO - 
2025-05-08 22:07:21,281 - flwr - INFO - [ROUND 22]
2025-05-08 22:07:21,281 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,295 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,296 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749185]
 [ 0.32749185]
 [ 1.2644665 ]
 ...
 [-0.94758534]
 [ 0.32749185]
 [ 0.4293996 ]]
2025-05-08 22:07:21,297 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20064369]
 [ 0.41777176]
 [ 0.18131879]
 ...
 [-0.40071929]
 [ 0.19950747]
 [ 0.07218665]]
2025-05-08 22:07:21,298 - v_central_server - INFO -  (Aggregate fit) round= 22 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2006],
        [ 0.4178],
        [ 0.1813],
        ...,
        [-0.4007],
        [ 0.1995],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,300 - v_central_server - INFO -  (round = 22) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4178,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6735, -0.9476],
        [-0.4371,  1.2645],
        [-0.1825,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2188,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4007, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,301 - v_central_server - INFO - (round = 22) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0042,  0.0109],
        [ 0.7241,  0.7673],
        ...,
        [-0.3331, -0.2340],
        [ 1.0053,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3602,  0.4323],
        [ 0.7986,  0.8581],
        ...,
        [-0.4571, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,302 - v_central_server - INFO - Server round 22 - Loss: 0.6898033618927002 - Accuracy: 0.5622
2025-05-08 22:07:21,303 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,312 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,354 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,355 - flwr - INFO - 
2025-05-08 22:07:21,356 - flwr - INFO - [ROUND 23]
2025-05-08 22:07:21,357 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,367 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,368 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20062685]
 [ 0.41773668]
 [ 0.18130358]
 ...
 [-0.40068564]
 [ 0.19949073]
 [ 0.07218059]]
2025-05-08 22:07:21,369 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749298]
 [ 0.32749298]
 [ 1.2644715 ]
 ...
 [-0.94758266]
 [ 0.32749298]
 [ 0.42940068]]
2025-05-08 22:07:21,371 - v_central_server - INFO -  (Aggregate fit) round= 23 the resulting embedding map is : {'1': tensor([[-0.2006],
        [ 0.4177],
        [ 0.1813],
        ...,
        [-0.4007],
        [ 0.1995],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,373 - v_central_server - INFO -  (round = 23) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4177,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6735, -0.9476],
        [-0.4371,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2188,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4007, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,376 - v_central_server - INFO - (round = 23) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0042,  0.0110],
        [ 0.7241,  0.7673],
        ...,
        [-0.3331, -0.2340],
        [ 1.0053,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3602,  0.4323],
        [ 0.7986,  0.8581],
        ...,
        [-0.4571, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2707]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,377 - v_central_server - INFO - Server round 23 - Loss: 0.6898031234741211 - Accuracy: 0.5622
2025-05-08 22:07:21,379 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,394 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,447 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,448 - flwr - INFO - 
2025-05-08 22:07:21,448 - flwr - INFO - [ROUND 24]
2025-05-08 22:07:21,449 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,462 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,463 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274941 ]
 [ 0.3274941 ]
 [ 1.2644765 ]
 ...
 [-0.94758   ]
 [ 0.3274941 ]
 [ 0.42940176]]
2025-05-08 22:07:21,464 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20061001]
 [ 0.41770163]
 [ 0.18128835]
 ...
 [-0.40065202]
 [ 0.19947399]
 [ 0.07217453]]
2025-05-08 22:07:21,465 - v_central_server - INFO -  (Aggregate fit) round= 24 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2006],
        [ 0.4177],
        [ 0.1813],
        ...,
        [-0.4007],
        [ 0.1995],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,466 - v_central_server - INFO -  (round = 24) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4177,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6734, -0.9476],
        [-0.4370,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2188,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4007, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,467 - v_central_server - INFO - (round = 24) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0042,  0.0110],
        [ 0.7241,  0.7673],
        ...,
        [-0.3331, -0.2340],
        [ 1.0053,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8480],
        [ 0.3602,  0.4323],
        [ 0.7986,  0.8581],
        ...,
        [-0.4572, -0.3854],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,468 - v_central_server - INFO - Server round 24 - Loss: 0.6898033022880554 - Accuracy: 0.5622
2025-05-08 22:07:21,468 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,473 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,498 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,498 - flwr - INFO - 
2025-05-08 22:07:21,498 - flwr - INFO - [ROUND 25]
2025-05-08 22:07:21,499 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,508 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,509 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749525]
 [ 0.32749525]
 [ 1.2644815 ]
 ...
 [-0.9475773 ]
 [ 0.32749525]
 [ 0.42940283]]
2025-05-08 22:07:21,510 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20059317]
 [ 0.41766658]
 [ 0.18127313]
 ...
 [-0.4006184 ]
 [ 0.19945724]
 [ 0.07216848]]
2025-05-08 22:07:21,511 - v_central_server - INFO -  (Aggregate fit) round= 25 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2006],
        [ 0.4177],
        [ 0.1813],
        ...,
        [-0.4006],
        [ 0.1995],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,512 - v_central_server - INFO -  (round = 25) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4177,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6734, -0.9476],
        [-0.4370,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2188,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4006, -0.9476],
        [ 0.1995,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,514 - v_central_server - INFO - (round = 25) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0042,  0.0110],
        [ 0.7242,  0.7673],
        ...,
        [-0.3331, -0.2341],
        [ 1.0053,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8581],
        ...,
        [-0.4572, -0.3855],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,515 - v_central_server - INFO - Server round 25 - Loss: 0.6898032426834106 - Accuracy: 0.5622
2025-05-08 22:07:21,516 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,520 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,540 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,540 - flwr - INFO - 
2025-05-08 22:07:21,541 - flwr - INFO - [ROUND 26]
2025-05-08 22:07:21,542 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,549 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,551 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20057634]
 [ 0.4176315 ]
 [ 0.18125792]
 ...
 [-0.40058476]
 [ 0.1994405 ]
 [ 0.07216242]]
2025-05-08 22:07:21,551 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749638]
 [ 0.32749638]
 [ 1.2644866 ]
 ...
 [-0.9475746 ]
 [ 0.32749638]
 [ 0.4294039 ]]
2025-05-08 22:07:21,557 - v_central_server - INFO -  (Aggregate fit) round= 26 the resulting embedding map is : {'1': tensor([[-0.2006],
        [ 0.4176],
        [ 0.1813],
        ...,
        [-0.4006],
        [ 0.1994],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,559 - v_central_server - INFO -  (round = 26) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4176,  0.3275],
        [ 0.1813,  1.2645],
        ...,
        [-0.6733, -0.9476],
        [-0.4369,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2188,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4006, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,561 - v_central_server - INFO - (round = 26) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0042,  0.0110],
        [ 0.7242,  0.7673],
        ...,
        [-0.3332, -0.2341],
        [ 1.0052,  1.1105],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3855],
        [ 0.1034,  0.1321],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,562 - v_central_server - INFO - Server round 26 - Loss: 0.6898030638694763 - Accuracy: 0.5622
2025-05-08 22:07:21,562 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,567 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,590 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,591 - flwr - INFO - 
2025-05-08 22:07:21,591 - flwr - INFO - [ROUND 27]
2025-05-08 22:07:21,592 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,603 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,605 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20055951]
 [ 0.41759646]
 [ 0.1812427 ]
 ...
 [-0.40055114]
 [ 0.19942376]
 [ 0.07215636]]
2025-05-08 22:07:21,607 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3274975 ]
 [ 0.3274975 ]
 [ 1.2644916 ]
 ...
 [-0.94757193]
 [ 0.3274975 ]
 [ 0.42940497]]
2025-05-08 22:07:21,609 - v_central_server - INFO -  (Aggregate fit) round= 27 the resulting embedding map is : {'1': tensor([[-0.2006],
        [ 0.4176],
        [ 0.1812],
        ...,
        [-0.4006],
        [ 0.1994],
        [ 0.0722]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,610 - v_central_server - INFO -  (round = 27) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2006,  0.3275],
        [ 0.4176,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6733, -0.9476],
        [-0.4369,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2187,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4006, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,611 - v_central_server - INFO - (round = 27) the output_train tensor([[ 0.2853,  0.3542],
        [ 0.0043,  0.0110],
        [ 0.7242,  0.7673],
        ...,
        [-0.3332, -0.2341],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3855],
        [ 0.1035,  0.1321],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,612 - v_central_server - INFO - Server round 27 - Loss: 0.6898030042648315 - Accuracy: 0.5622
2025-05-08 22:07:21,613 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,617 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,642 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,643 - flwr - INFO - 
2025-05-08 22:07:21,643 - flwr - INFO - [ROUND 28]
2025-05-08 22:07:21,644 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,652 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,655 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749864]
 [ 0.32749864]
 [ 1.2644966 ]
 ...
 [-0.94756925]
 [ 0.32749864]
 [ 0.42940605]]
2025-05-08 22:07:21,657 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20054267]
 [ 0.4175614 ]
 [ 0.18122749]
 ...
 [-0.40051752]
 [ 0.19940701]
 [ 0.0721503 ]]
2025-05-08 22:07:21,659 - v_central_server - INFO -  (Aggregate fit) round= 28 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2005],
        [ 0.4176],
        [ 0.1812],
        ...,
        [-0.4005],
        [ 0.1994],
        [ 0.0722]], requires_grad=True)}
2025-05-08 22:07:21,660 - v_central_server - INFO -  (round = 28) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4176,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6732, -0.9476],
        [-0.4369,  1.2645],
        [-0.1824,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2187,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4005, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0722,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,661 - v_central_server - INFO - (round = 28) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0043,  0.0111],
        [ 0.7242,  0.7673],
        ...,
        [-0.3332, -0.2341],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3855],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,662 - v_central_server - INFO - Server round 28 - Loss: 0.6898028254508972 - Accuracy: 0.5622
2025-05-08 22:07:21,662 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,666 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,682 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,682 - flwr - INFO - 
2025-05-08 22:07:21,683 - flwr - INFO - [ROUND 29]
2025-05-08 22:07:21,683 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,694 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,695 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32749978]
 [ 0.32749978]
 [ 1.2645016 ]
 ...
 [-0.94756657]
 [ 0.32749978]
 [ 0.42940712]]
2025-05-08 22:07:21,696 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20052584]
 [ 0.41752633]
 [ 0.18121228]
 ...
 [-0.40048388]
 [ 0.19939028]
 [ 0.07214425]]
2025-05-08 22:07:21,697 - v_central_server - INFO -  (Aggregate fit) round= 29 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2005],
        [ 0.4175],
        [ 0.1812],
        ...,
        [-0.4005],
        [ 0.1994],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:21,698 - v_central_server - INFO -  (round = 29) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4175,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6732, -0.9476],
        [-0.4368,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2187,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4005, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,700 - v_central_server - INFO - (round = 29) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0043,  0.0111],
        [ 0.7242,  0.7674],
        ...,
        [-0.3332, -0.2342],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9692]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3855],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,700 - v_central_server - INFO - Server round 29 - Loss: 0.689802885055542 - Accuracy: 0.5622
2025-05-08 22:07:21,701 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,708 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,727 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,728 - flwr - INFO - 
2025-05-08 22:07:21,728 - flwr - INFO - [ROUND 30]
2025-05-08 22:07:21,728 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,737 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,739 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.200509  ]
 [ 0.4174913 ]
 [ 0.18119706]
 ...
 [-0.40045026]
 [ 0.19937353]
 [ 0.07213818]]
2025-05-08 22:07:21,740 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275009]
 [ 0.3275009]
 [ 1.2645066]
 ...
 [-0.9475639]
 [ 0.3275009]
 [ 0.4294082]]
2025-05-08 22:07:21,742 - v_central_server - INFO -  (Aggregate fit) round= 30 the resulting embedding map is : {'1': tensor([[-0.2005],
        [ 0.4175],
        [ 0.1812],
        ...,
        [-0.4005],
        [ 0.1994],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,743 - v_central_server - INFO -  (round = 30) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4175,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6731, -0.9476],
        [-0.4368,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2187,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4005, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,744 - v_central_server - INFO - (round = 30) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0043,  0.0111],
        [ 0.7242,  0.7674],
        ...,
        [-0.3333, -0.2342],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3855],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,745 - v_central_server - INFO - Server round 30 - Loss: 0.6898027658462524 - Accuracy: 0.5622
2025-05-08 22:07:21,746 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,750 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,775 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,775 - flwr - INFO - 
2025-05-08 22:07:21,776 - flwr - INFO - [ROUND 31]
2025-05-08 22:07:21,776 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,790 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,791 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20049216]
 [ 0.41745624]
 [ 0.18118185]
 ...
 [-0.40041664]
 [ 0.1993568 ]
 [ 0.07213213]]
2025-05-08 22:07:21,792 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750204]
 [ 0.32750204]
 [ 1.2645116 ]
 ...
 [-0.9475612 ]
 [ 0.32750204]
 [ 0.42940927]]
2025-05-08 22:07:21,794 - v_central_server - INFO -  (Aggregate fit) round= 31 the resulting embedding map is : {'1': tensor([[-0.2005],
        [ 0.4175],
        [ 0.1812],
        ...,
        [-0.4004],
        [ 0.1994],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,795 - v_central_server - INFO -  (round = 31) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4175,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6730, -0.9476],
        [-0.4368,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2187,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4004, -0.9476],
        [ 0.1994,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,796 - v_central_server - INFO - (round = 31) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0043,  0.0111],
        [ 0.7242,  0.7674],
        ...,
        [-0.3333, -0.2342],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4572, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,796 - v_central_server - INFO - Server round 31 - Loss: 0.6898025870323181 - Accuracy: 0.5622
2025-05-08 22:07:21,797 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,801 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,830 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,830 - flwr - INFO - 
2025-05-08 22:07:21,831 - flwr - INFO - [ROUND 32]
2025-05-08 22:07:21,831 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,842 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,843 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750317]
 [ 0.32750317]
 [ 1.2645166 ]
 ...
 [-0.9475585 ]
 [ 0.32750317]
 [ 0.42941034]]
2025-05-08 22:07:21,844 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20047532]
 [ 0.41742116]
 [ 0.18116663]
 ...
 [-0.400383  ]
 [ 0.19934005]
 [ 0.07212607]]
2025-05-08 22:07:21,845 - v_central_server - INFO -  (Aggregate fit) round= 32 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2005],
        [ 0.4174],
        [ 0.1812],
        ...,
        [-0.4004],
        [ 0.1993],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:21,846 - v_central_server - INFO -  (round = 32) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4174,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6730, -0.9476],
        [-0.4367,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4004, -0.9476],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,848 - v_central_server - INFO - (round = 32) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0043,  0.0111],
        [ 0.7242,  0.7674],
        ...,
        [-0.3333, -0.2343],
        [ 1.0052,  1.1104],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3602,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,848 - v_central_server - INFO - Server round 32 - Loss: 0.6898026466369629 - Accuracy: 0.5622
2025-05-08 22:07:21,849 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,853 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,873 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,874 - flwr - INFO - 
2025-05-08 22:07:21,875 - flwr - INFO - [ROUND 33]
2025-05-08 22:07:21,875 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,883 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,884 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20045848]
 [ 0.4173861 ]
 [ 0.1811514 ]
 ...
 [-0.40034938]
 [ 0.19932331]
 [ 0.07212001]]
2025-05-08 22:07:21,884 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275043 ]
 [ 0.3275043 ]
 [ 1.2645216 ]
 ...
 [-0.94755584]
 [ 0.3275043 ]
 [ 0.4294114 ]]
2025-05-08 22:07:21,886 - v_central_server - INFO -  (Aggregate fit) round= 33 the resulting embedding map is : {'1': tensor([[-0.2005],
        [ 0.4174],
        [ 0.1812],
        ...,
        [-0.4003],
        [ 0.1993],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:21,889 - v_central_server - INFO -  (round = 33) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2005,  0.3275],
        [ 0.4174,  0.3275],
        [ 0.1812,  1.2645],
        ...,
        [-0.6729, -0.9476],
        [-0.4367,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4003, -0.9476],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,891 - v_central_server - INFO - (round = 33) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0044,  0.0112],
        [ 0.7242,  0.7674],
        ...,
        [-0.3333, -0.2343],
        [ 1.0052,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3601,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2279,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,892 - v_central_server - INFO - Server round 33 - Loss: 0.6898025274276733 - Accuracy: 0.5622
2025-05-08 22:07:21,893 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,897 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,918 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,918 - flwr - INFO - 
2025-05-08 22:07:21,919 - flwr - INFO - [ROUND 34]
2025-05-08 22:07:21,919 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,930 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,931 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750544]
 [ 0.32750544]
 [ 1.2645266 ]
 ...
 [-0.94755316]
 [ 0.32750544]
 [ 0.42941248]]
2025-05-08 22:07:21,931 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20044164]
 [ 0.41735107]
 [ 0.18113619]
 ...
 [-0.40031573]
 [ 0.19930656]
 [ 0.07211395]]
2025-05-08 22:07:21,933 - v_central_server - INFO -  (Aggregate fit) round= 34 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2004],
        [ 0.4174],
        [ 0.1811],
        ...,
        [-0.4003],
        [ 0.1993],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:21,934 - v_central_server - INFO -  (round = 34) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4174,  0.3275],
        [ 0.1811,  1.2645],
        ...,
        [-0.6729, -0.9476],
        [-0.4367,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4003, -0.9476],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,935 - v_central_server - INFO - (round = 34) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0044,  0.0112],
        [ 0.7242,  0.7674],
        ...,
        [-0.3334, -0.2343],
        [ 1.0051,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3601,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,936 - v_central_server - INFO - Server round 34 - Loss: 0.6898024678230286 - Accuracy: 0.5622
2025-05-08 22:07:21,937 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,943 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,963 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:21,964 - flwr - INFO - 
2025-05-08 22:07:21,964 - flwr - INFO - [ROUND 35]
2025-05-08 22:07:21,965 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:21,975 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:21,976 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750657]
 [ 0.32750657]
 [ 1.2645316 ]
 ...
 [-0.9475505 ]
 [ 0.32750657]
 [ 0.42941356]]
2025-05-08 22:07:21,977 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.2004248 ]
 [ 0.417316  ]
 [ 0.18112098]
 ...
 [-0.4002821 ]
 [ 0.19928983]
 [ 0.0721079 ]]
2025-05-08 22:07:21,978 - v_central_server - INFO -  (Aggregate fit) round= 35 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9476],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2004],
        [ 0.4173],
        [ 0.1811],
        ...,
        [-0.4003],
        [ 0.1993],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:21,979 - v_central_server - INFO -  (round = 35) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4173,  0.3275],
        [ 0.1811,  1.2645],
        ...,
        [-0.6728, -0.9476],
        [-0.4366,  1.2645],
        [-0.1823,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4003, -0.9476],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:21,980 - v_central_server - INFO - (round = 35) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0044,  0.0112],
        [ 0.7243,  0.7674],
        ...,
        [-0.3334, -0.2344],
        [ 1.0051,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3601,  0.4322],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:21,980 - v_central_server - INFO - Server round 35 - Loss: 0.6898022890090942 - Accuracy: 0.5622
2025-05-08 22:07:21,981 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:21,985 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,010 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,010 - flwr - INFO - 
2025-05-08 22:07:22,011 - flwr - INFO - [ROUND 36]
2025-05-08 22:07:22,011 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,020 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,022 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20040797]
 [ 0.41728094]
 [ 0.18110576]
 ...
 [-0.4002485 ]
 [ 0.19927308]
 [ 0.07210184]]
2025-05-08 22:07:22,022 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275077 ]
 [ 0.3275077 ]
 [ 1.2645366 ]
 ...
 [-0.9475478 ]
 [ 0.3275077 ]
 [ 0.42941463]]
2025-05-08 22:07:22,025 - v_central_server - INFO -  (Aggregate fit) round= 36 the resulting embedding map is : {'1': tensor([[-0.2004],
        [ 0.4173],
        [ 0.1811],
        ...,
        [-0.4002],
        [ 0.1993],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:22,026 - v_central_server - INFO -  (round = 36) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4173,  0.3275],
        [ 0.1811,  1.2645],
        ...,
        [-0.6728, -0.9475],
        [-0.4366,  1.2645],
        [-0.1822,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4002, -0.9475],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,027 - v_central_server - INFO - (round = 36) the output_train tensor([[ 0.2853,  0.3541],
        [ 0.0044,  0.0112],
        [ 0.7243,  0.7674],
        ...,
        [-0.3334, -0.2344],
        [ 1.0051,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7903,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3856],
        [ 0.1035,  0.1322],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,028 - v_central_server - INFO - Server round 36 - Loss: 0.6898022890090942 - Accuracy: 0.5622
2025-05-08 22:07:22,028 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,032 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,052 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,056 - flwr - INFO - 
2025-05-08 22:07:22,056 - flwr - INFO - [ROUND 37]
2025-05-08 22:07:22,057 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,066 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,066 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750884]
 [ 0.32750884]
 [ 1.2645416 ]
 ...
 [-0.9475451 ]
 [ 0.32750884]
 [ 0.4294157 ]]
2025-05-08 22:07:22,067 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20039113]
 [ 0.41724586]
 [ 0.18109055]
 ...
 [-0.40021485]
 [ 0.19925633]
 [ 0.07209578]]
2025-05-08 22:07:22,068 - v_central_server - INFO -  (Aggregate fit) round= 37 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2004],
        [ 0.4172],
        [ 0.1811],
        ...,
        [-0.4002],
        [ 0.1993],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,070 - v_central_server - INFO -  (round = 37) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4172,  0.3275],
        [ 0.1811,  1.2645],
        ...,
        [-0.6727, -0.9475],
        [-0.4365,  1.2645],
        [-0.1822,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2186,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4002, -0.9475],
        [ 0.1993,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,072 - v_central_server - INFO - (round = 37) the output_train tensor([[ 0.2852,  0.3541],
        [ 0.0044,  0.0112],
        [ 0.7243,  0.7675],
        ...,
        [-0.3334, -0.2344],
        [ 1.0051,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3857],
        [ 0.1035,  0.1322],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,073 - v_central_server - INFO - Server round 37 - Loss: 0.6898022294044495 - Accuracy: 0.5622
2025-05-08 22:07:22,075 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,078 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,102 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,103 - flwr - INFO - 
2025-05-08 22:07:22,105 - flwr - INFO - [ROUND 38]
2025-05-08 22:07:22,106 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,115 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,116 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32750997]
 [ 0.32750997]
 [ 1.2645466 ]
 ...
 [-0.9475424 ]
 [ 0.32750997]
 [ 0.42941678]]
2025-05-08 22:07:22,117 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20037429]
 [ 0.41721082]
 [ 0.18107533]
 ...
 [-0.40018123]
 [ 0.1992396 ]
 [ 0.07208972]]
2025-05-08 22:07:22,118 - v_central_server - INFO -  (Aggregate fit) round= 38 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2645],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2004],
        [ 0.4172],
        [ 0.1811],
        ...,
        [-0.4002],
        [ 0.1992],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,119 - v_central_server - INFO -  (round = 38) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4172,  0.3275],
        [ 0.1811,  1.2645],
        ...,
        [-0.6726, -0.9475],
        [-0.4365,  1.2645],
        [-0.1822,  1.2645]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2645],
        [-0.2185,  0.4294],
        [ 0.0176,  1.2645],
        ...,
        [-0.4002, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,122 - v_central_server - INFO - (round = 38) the output_train tensor([[ 0.2852,  0.3541],
        [ 0.0044,  0.0113],
        [ 0.7243,  0.7675],
        ...,
        [-0.3335, -0.2344],
        [ 1.0051,  1.1103],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4573, -0.3857],
        [ 0.1035,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,124 - v_central_server - INFO - Server round 38 - Loss: 0.6898022294044495 - Accuracy: 0.5622
2025-05-08 22:07:22,125 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,130 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,182 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,183 - flwr - INFO - 
2025-05-08 22:07:22,185 - flwr - INFO - [ROUND 39]
2025-05-08 22:07:22,185 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,196 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,198 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275111 ]
 [ 0.3275111 ]
 [ 1.2645516 ]
 ...
 [-0.94753975]
 [ 0.3275111 ]
 [ 0.42941785]]
2025-05-08 22:07:22,199 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20035745]
 [ 0.41717577]
 [ 0.18106012]
 ...
 [-0.40014762]
 [ 0.19922285]
 [ 0.07208367]]
2025-05-08 22:07:22,200 - v_central_server - INFO -  (Aggregate fit) round= 39 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2004],
        [ 0.4172],
        [ 0.1811],
        ...,
        [-0.4001],
        [ 0.1992],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,202 - v_central_server - INFO -  (round = 39) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2004,  0.3275],
        [ 0.4172,  0.3275],
        [ 0.1811,  1.2646],
        ...,
        [-0.6726, -0.9475],
        [-0.4365,  1.2646],
        [-0.1822,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2646],
        [-0.2185,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4001, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,205 - v_central_server - INFO - (round = 39) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0113],
        [ 0.7243,  0.7675],
        ...,
        [-0.3335, -0.2345],
        [ 1.0051,  1.1102],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3857],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,208 - v_central_server - INFO - Server round 39 - Loss: 0.6898022294044495 - Accuracy: 0.5622
2025-05-08 22:07:22,208 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,213 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,277 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,278 - flwr - INFO - 
2025-05-08 22:07:22,278 - flwr - INFO - [ROUND 40]
2025-05-08 22:07:22,279 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,293 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,294 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20034061]
 [ 0.4171407 ]
 [ 0.1810449 ]
 ...
 [-0.40011397]
 [ 0.19920611]
 [ 0.07207761]]
2025-05-08 22:07:22,296 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32751223]
 [ 0.32751223]
 [ 1.2645566 ]
 ...
 [-0.94753706]
 [ 0.32751223]
 [ 0.42941892]]
2025-05-08 22:07:22,297 - v_central_server - INFO -  (Aggregate fit) round= 40 the resulting embedding map is : {'1': tensor([[-0.2003],
        [ 0.4171],
        [ 0.1810],
        ...,
        [-0.4001],
        [ 0.1992],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:22,299 - v_central_server - INFO -  (round = 40) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4171,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6725, -0.9475],
        [-0.4364,  1.2646],
        [-0.1822,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2646],
        [-0.2185,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4001, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,301 - v_central_server - INFO - (round = 40) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0113],
        [ 0.7243,  0.7675],
        ...,
        [-0.3335, -0.2345],
        [ 1.0051,  1.1102],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3857],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,302 - v_central_server - INFO - Server round 40 - Loss: 0.6898021101951599 - Accuracy: 0.5622
2025-05-08 22:07:22,305 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,311 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,340 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,341 - flwr - INFO - 
2025-05-08 22:07:22,342 - flwr - INFO - [ROUND 41]
2025-05-08 22:07:22,343 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,361 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,362 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32751337]
 [ 0.32751337]
 [ 1.2645617 ]
 ...
 [-0.9475344 ]
 [ 0.32751337]
 [ 0.42942   ]]
2025-05-08 22:07:22,363 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20032378]
 [ 0.41710564]
 [ 0.18102969]
 ...
 [-0.40008035]
 [ 0.19918936]
 [ 0.07207155]]
2025-05-08 22:07:22,365 - v_central_server - INFO -  (Aggregate fit) round= 41 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2003],
        [ 0.4171],
        [ 0.1810],
        ...,
        [-0.4001],
        [ 0.1992],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,366 - v_central_server - INFO -  (round = 41) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4171,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6725, -0.9475],
        [-0.4364,  1.2646],
        [-0.1822,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0358,  1.2646],
        [-0.2185,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4001, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,368 - v_central_server - INFO - (round = 41) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0113],
        [ 0.7243,  0.7675],
        ...,
        [-0.3335, -0.2345],
        [ 1.0050,  1.1102],
        [ 0.8895,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3857],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,370 - v_central_server - INFO - Server round 41 - Loss: 0.6898019909858704 - Accuracy: 0.5622
2025-05-08 22:07:22,373 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,378 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,421 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,422 - flwr - INFO - 
2025-05-08 22:07:22,422 - flwr - INFO - [ROUND 42]
2025-05-08 22:07:22,423 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,434 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,435 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275145 ]
 [ 0.3275145 ]
 [ 1.2645667 ]
 ...
 [-0.9475317 ]
 [ 0.3275145 ]
 [ 0.42942107]]
2025-05-08 22:07:22,437 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20030694]
 [ 0.4170706 ]
 [ 0.18101446]
 ...
 [-0.40004674]
 [ 0.19917263]
 [ 0.07206549]]
2025-05-08 22:07:22,440 - v_central_server - INFO -  (Aggregate fit) round= 42 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2003],
        [ 0.4171],
        [ 0.1810],
        ...,
        [-0.4000],
        [ 0.1992],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,443 - v_central_server - INFO -  (round = 42) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4171,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6724, -0.9475],
        [-0.4364,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2185,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4000, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,444 - v_central_server - INFO - (round = 42) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0113],
        [ 0.7243,  0.7675],
        ...,
        [-0.3336, -0.2346],
        [ 1.0050,  1.1102],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3857],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,464 - v_central_server - INFO - Server round 42 - Loss: 0.6898018717765808 - Accuracy: 0.5622
2025-05-08 22:07:22,465 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,472 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,529 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,529 - flwr - INFO - 
2025-05-08 22:07:22,530 - flwr - INFO - [ROUND 43]
2025-05-08 22:07:22,531 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,544 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,546 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.2002901 ]
 [ 0.41703552]
 [ 0.18099925]
 ...
 [-0.4000131 ]
 [ 0.19915588]
 [ 0.07205944]]
2025-05-08 22:07:22,547 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32751563]
 [ 0.32751563]
 [ 1.2645717 ]
 ...
 [-0.947529  ]
 [ 0.32751563]
 [ 0.42942214]]
2025-05-08 22:07:22,550 - v_central_server - INFO -  (Aggregate fit) round= 43 the resulting embedding map is : {'1': tensor([[-0.2003],
        [ 0.4170],
        [ 0.1810],
        ...,
        [-0.4000],
        [ 0.1992],
        [ 0.0721]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:22,552 - v_central_server - INFO -  (round = 43) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4170,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6724, -0.9475],
        [-0.4363,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4000, -0.9475],
        [ 0.1992,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,556 - v_central_server - INFO - (round = 43) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0114],
        [ 0.7243,  0.7675],
        ...,
        [-0.3336, -0.2346],
        [ 1.0050,  1.1102],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8481],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3858],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,561 - v_central_server - INFO - Server round 43 - Loss: 0.689801812171936 - Accuracy: 0.5622
2025-05-08 22:07:22,571 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,577 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,634 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,635 - flwr - INFO - 
2025-05-08 22:07:22,635 - flwr - INFO - [ROUND 44]
2025-05-08 22:07:22,637 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,649 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,650 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32751676]
 [ 0.32751676]
 [ 1.2645767 ]
 ...
 [-0.94752634]
 [ 0.32751676]
 [ 0.4294232 ]]
2025-05-08 22:07:22,652 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20027328]
 [ 0.41700047]
 [ 0.18098404]
 ...
 [-0.39997947]
 [ 0.19913915]
 [ 0.07205338]]
2025-05-08 22:07:22,656 - v_central_server - INFO -  (Aggregate fit) round= 44 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2003],
        [ 0.4170],
        [ 0.1810],
        ...,
        [-0.4000],
        [ 0.1991],
        [ 0.0721]], requires_grad=True)}
2025-05-08 22:07:22,659 - v_central_server - INFO -  (round = 44) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4170,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6723, -0.9475],
        [-0.4363,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.4000, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0721,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,661 - v_central_server - INFO - (round = 44) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0045,  0.0114],
        [ 0.7243,  0.7675],
        ...,
        [-0.3336, -0.2346],
        [ 1.0050,  1.1102],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3858],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,662 - v_central_server - INFO - Server round 44 - Loss: 0.6898017525672913 - Accuracy: 0.5622
2025-05-08 22:07:22,663 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,668 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,715 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,716 - flwr - INFO - 
2025-05-08 22:07:22,716 - flwr - INFO - [ROUND 45]
2025-05-08 22:07:22,717 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,730 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,731 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275179 ]
 [ 0.3275179 ]
 [ 1.2645817 ]
 ...
 [-0.94752365]
 [ 0.3275179 ]
 [ 0.4294243 ]]
2025-05-08 22:07:22,733 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20025644]
 [ 0.41696543]
 [ 0.18096882]
 ...
 [-0.39994586]
 [ 0.1991224 ]
 [ 0.07204732]]
2025-05-08 22:07:22,735 - v_central_server - INFO -  (Aggregate fit) round= 45 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2003],
        [ 0.4170],
        [ 0.1810],
        ...,
        [-0.3999],
        [ 0.1991],
        [ 0.0720]], requires_grad=True)}
2025-05-08 22:07:22,737 - v_central_server - INFO -  (round = 45) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2003,  0.3275],
        [ 0.4170,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6722, -0.9475],
        [-0.4363,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3999, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,739 - v_central_server - INFO - (round = 45) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0114],
        [ 0.7244,  0.7675],
        ...,
        [-0.3336, -0.2347],
        [ 1.0050,  1.1101],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3601,  0.4321],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3858],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,741 - v_central_server - INFO - Server round 45 - Loss: 0.6898015737533569 - Accuracy: 0.5622
2025-05-08 22:07:22,742 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,746 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,767 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,767 - flwr - INFO - 
2025-05-08 22:07:22,768 - flwr - INFO - [ROUND 46]
2025-05-08 22:07:22,769 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,781 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,782 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32751903]
 [ 0.32751903]
 [ 1.2645867 ]
 ...
 [-0.947521  ]
 [ 0.32751903]
 [ 0.42942536]]
2025-05-08 22:07:22,783 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.2002396 ]
 [ 0.41693035]
 [ 0.1809536 ]
 ...
 [-0.3999122 ]
 [ 0.19910567]
 [ 0.07204127]]
2025-05-08 22:07:22,784 - v_central_server - INFO -  (Aggregate fit) round= 46 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2002],
        [ 0.4169],
        [ 0.1810],
        ...,
        [-0.3999],
        [ 0.1991],
        [ 0.0720]], requires_grad=True)}
2025-05-08 22:07:22,787 - v_central_server - INFO -  (round = 46) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2002,  0.3275],
        [ 0.4169,  0.3275],
        [ 0.1810,  1.2646],
        ...,
        [-0.6722, -0.9475],
        [-0.4362,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3999, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,789 - v_central_server - INFO - (round = 46) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0114],
        [ 0.7244,  0.7676],
        ...,
        [-0.3337, -0.2347],
        [ 1.0050,  1.1101],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3600,  0.4320],
        [ 0.7986,  0.8582],
        ...,
        [-0.4574, -0.3858],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,791 - v_central_server - INFO - Server round 46 - Loss: 0.6898015141487122 - Accuracy: 0.5622
2025-05-08 22:07:22,792 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,797 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,825 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,826 - flwr - INFO - 
2025-05-08 22:07:22,826 - flwr - INFO - [ROUND 47]
2025-05-08 22:07:22,827 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,835 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,838 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20022276]
 [ 0.4168953 ]
 [ 0.1809384 ]
 ...
 [-0.3998786 ]
 [ 0.19908892]
 [ 0.07203521]]
2025-05-08 22:07:22,839 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32752016]
 [ 0.32752016]
 [ 1.2645917 ]
 ...
 [-0.9475183 ]
 [ 0.32752016]
 [ 0.42942643]]
2025-05-08 22:07:22,841 - v_central_server - INFO -  (Aggregate fit) round= 47 the resulting embedding map is : {'1': tensor([[-0.2002],
        [ 0.4169],
        [ 0.1809],
        ...,
        [-0.3999],
        [ 0.1991],
        [ 0.0720]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:22,842 - v_central_server - INFO -  (round = 47) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2002,  0.3275],
        [ 0.4169,  0.3275],
        [ 0.1809,  1.2646],
        ...,
        [-0.6721, -0.9475],
        [-0.4362,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3999, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,843 - v_central_server - INFO - (round = 47) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0114],
        [ 0.7244,  0.7676],
        ...,
        [-0.3337, -0.2347],
        [ 1.0050,  1.1101],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3600,  0.4320],
        [ 0.7987,  0.8582],
        ...,
        [-0.4575, -0.3858],
        [ 0.1036,  0.1323],
        [ 0.2280,  0.2708]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,844 - v_central_server - INFO - Server round 47 - Loss: 0.6898015141487122 - Accuracy: 0.5622
2025-05-08 22:07:22,845 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,850 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,880 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,880 - flwr - INFO - 
2025-05-08 22:07:22,881 - flwr - INFO - [ROUND 48]
2025-05-08 22:07:22,881 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,893 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,894 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.3275213]
 [ 0.3275213]
 [ 1.2645967]
 ...
 [-0.9475156]
 [ 0.3275213]
 [ 0.4294275]]
2025-05-08 22:07:22,895 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20020592]
 [ 0.41686025]
 [ 0.18092318]
 ...
 [-0.39984497]
 [ 0.19907217]
 [ 0.07202915]]
2025-05-08 22:07:22,897 - v_central_server - INFO -  (Aggregate fit) round= 48 the resulting embedding map is : {'2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True), '1': tensor([[-0.2002],
        [ 0.4169],
        [ 0.1809],
        ...,
        [-0.3998],
        [ 0.1991],
        [ 0.0720]], requires_grad=True)}
2025-05-08 22:07:22,898 - v_central_server - INFO -  (round = 48) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2002,  0.3275],
        [ 0.4169,  0.3275],
        [ 0.1809,  1.2646],
        ...,
        [-0.6721, -0.9475],
        [-0.4361,  1.2646],
        [-0.1821,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2184,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3998, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,899 - v_central_server - INFO - (round = 48) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0115],
        [ 0.7244,  0.7676],
        ...,
        [-0.3337, -0.2347],
        [ 1.0050,  1.1101],
        [ 0.8894,  0.9691]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3600,  0.4320],
        [ 0.7987,  0.8582],
        ...,
        [-0.4575, -0.3858],
        [ 0.1036,  0.1324],
        [ 0.2280,  0.2709]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,900 - v_central_server - INFO - Server round 48 - Loss: 0.6898015141487122 - Accuracy: 0.5622
2025-05-08 22:07:22,901 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,908 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,933 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,934 - flwr - INFO - 
2025-05-08 22:07:22,934 - flwr - INFO - [ROUND 49]
2025-05-08 22:07:22,935 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,946 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,947 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20018908]
 [ 0.41682518]
 [ 0.18090796]
 ...
 [-0.39981133]
 [ 0.19905543]
 [ 0.07202309]]
2025-05-08 22:07:22,948 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32752243]
 [ 0.32752243]
 [ 1.2646017 ]
 ...
 [-0.9475129 ]
 [ 0.32752243]
 [ 0.42942858]]
2025-05-08 22:07:22,949 - v_central_server - INFO -  (Aggregate fit) round= 49 the resulting embedding map is : {'1': tensor([[-0.2002],
        [ 0.4168],
        [ 0.1809],
        ...,
        [-0.3998],
        [ 0.1991],
        [ 0.0720]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:22,951 - v_central_server - INFO -  (round = 49) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2002,  0.3275],
        [ 0.4168,  0.3275],
        [ 0.1809,  1.2646],
        ...,
        [-0.6720, -0.9475],
        [-0.4361,  1.2646],
        [-0.1820,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2183,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3998, -0.9475],
        [ 0.1991,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:22,952 - v_central_server - INFO - (round = 49) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0115],
        [ 0.7244,  0.7676],
        ...,
        [-0.3337, -0.2348],
        [ 1.0049,  1.1101],
        [ 0.8894,  0.9690]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3600,  0.4320],
        [ 0.7987,  0.8582],
        ...,
        [-0.4575, -0.3859],
        [ 0.1036,  0.1324],
        [ 0.2280,  0.2709]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:22,954 - v_central_server - INFO - Server round 49 - Loss: 0.6898013353347778 - Accuracy: 0.5622
2025-05-08 22:07:22,956 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:22,961 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,983 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:22,984 - flwr - INFO - 
2025-05-08 22:07:22,984 - flwr - INFO - [ROUND 50]
2025-05-08 22:07:22,985 - flwr - INFO - configure_fit: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:22,997 - flwr - INFO - aggregate_fit: received 2 results and 0 failures
2025-05-08 22:07:22,998 - v_central_server - WARNING - the received parameters from node 1  /// after : [[-0.20017225]
 [ 0.41679013]
 [ 0.18089275]
 ...
 [-0.3997777 ]
 [ 0.19903868]
 [ 0.07201703]]
2025-05-08 22:07:22,999 - v_central_server - WARNING - the received parameters from node 2  /// after : [[ 0.32752356]
 [ 0.32752356]
 [ 1.2646067 ]
 ...
 [-0.94751024]
 [ 0.32752356]
 [ 0.42942965]]
2025-05-08 22:07:23,000 - v_central_server - INFO -  (Aggregate fit) round= 50 the resulting embedding map is : {'1': tensor([[-0.2002],
        [ 0.4168],
        [ 0.1809],
        ...,
        [-0.3998],
        [ 0.1990],
        [ 0.0720]], requires_grad=True), '2': tensor([[ 0.3275],
        [ 0.3275],
        [ 1.2646],
        ...,
        [-0.9475],
        [ 0.3275],
        [ 0.4294]], requires_grad=True)}
2025-05-08 22:07:23,002 - v_central_server - INFO -  (round = 50) the x_train torch.Size([3150, 2]) x_test torch.Size([788, 2]) /// tensor([[-0.2002,  0.3275],
        [ 0.4168,  0.3275],
        [ 0.1809,  1.2646],
        ...,
        [-0.6720, -0.9475],
        [-0.4361,  1.2646],
        [-0.1820,  1.2646]], grad_fn=<SliceBackward0>) ////tensor([[ 0.0357,  1.2646],
        [-0.2183,  0.4294],
        [ 0.0176,  1.2646],
        ...,
        [-0.3998, -0.9475],
        [ 0.1990,  0.3275],
        [ 0.0720,  0.4294]], grad_fn=<SliceBackward0>)
2025-05-08 22:07:23,005 - v_central_server - INFO - (round = 50) the output_train tensor([[ 0.2852,  0.3540],
        [ 0.0046,  0.0115],
        [ 0.7244,  0.7676],
        ...,
        [-0.3337, -0.2348],
        [ 1.0049,  1.1100],
        [ 0.8894,  0.9690]], grad_fn=<AddmmBackward0>) output_test tensor([[ 0.7904,  0.8482],
        [ 0.3600,  0.4320],
        [ 0.7987,  0.8583],
        ...,
        [-0.4575, -0.3859],
        [ 0.1036,  0.1324],
        [ 0.2280,  0.2709]], grad_fn=<AddmmBackward0>)
2025-05-08 22:07:23,007 - v_central_server - INFO - Server round 50 - Loss: 0.6898012757301331 - Accuracy: 0.5622
2025-05-08 22:07:23,017 - v_central_server - INFO -  the sorted_ids are : [None, 1, 2].
2025-05-08 22:07:23,023 - flwr - INFO - configure_evaluate: strategy sampled 2 clients (out of 2)
2025-05-08 22:07:23,048 - flwr - INFO - aggregate_evaluate: received 2 results and 0 failures
2025-05-08 22:07:23,048 - flwr - INFO - 
2025-05-08 22:07:23,049 - flwr - INFO - [SUMMARY]
2025-05-08 22:07:23,050 - flwr - INFO - Run finished 50 round(s) in 10.28s
2025-05-08 22:07:23,052 - flwr - INFO - 	History (loss, distributed):
2025-05-08 22:07:23,053 - flwr - INFO - 		round 1: 0.0
2025-05-08 22:07:23,054 - flwr - INFO - 		round 2: 0.0
2025-05-08 22:07:23,055 - flwr - INFO - 		round 3: 0.0
2025-05-08 22:07:23,056 - flwr - INFO - 		round 4: 0.0
2025-05-08 22:07:23,056 - flwr - INFO - 		round 5: 0.0
2025-05-08 22:07:23,057 - flwr - INFO - 		round 6: 0.0
2025-05-08 22:07:23,058 - flwr - INFO - 		round 7: 0.0
2025-05-08 22:07:23,058 - flwr - INFO - 		round 8: 0.0
2025-05-08 22:07:23,058 - flwr - INFO - 		round 9: 0.0
2025-05-08 22:07:23,059 - flwr - INFO - 		round 10: 0.0
2025-05-08 22:07:23,059 - flwr - INFO - 		round 11: 0.0
2025-05-08 22:07:23,059 - flwr - INFO - 		round 12: 0.0
2025-05-08 22:07:23,060 - flwr - INFO - 		round 13: 0.0
2025-05-08 22:07:23,060 - flwr - INFO - 		round 14: 0.0
2025-05-08 22:07:23,061 - flwr - INFO - 		round 15: 0.0
2025-05-08 22:07:23,061 - flwr - INFO - 		round 16: 0.0
2025-05-08 22:07:23,061 - flwr - INFO - 		round 17: 0.0
2025-05-08 22:07:23,062 - flwr - INFO - 		round 18: 0.0
2025-05-08 22:07:23,062 - flwr - INFO - 		round 19: 0.0
2025-05-08 22:07:23,063 - flwr - INFO - 		round 20: 0.0
2025-05-08 22:07:23,063 - flwr - INFO - 		round 21: 0.0
2025-05-08 22:07:23,064 - flwr - INFO - 		round 22: 0.0
2025-05-08 22:07:23,064 - flwr - INFO - 		round 23: 0.0
2025-05-08 22:07:23,064 - flwr - INFO - 		round 24: 0.0
2025-05-08 22:07:23,065 - flwr - INFO - 		round 25: 0.0
2025-05-08 22:07:23,065 - flwr - INFO - 		round 26: 0.0
2025-05-08 22:07:23,065 - flwr - INFO - 		round 27: 0.0
2025-05-08 22:07:23,066 - flwr - INFO - 		round 28: 0.0
2025-05-08 22:07:23,066 - flwr - INFO - 		round 29: 0.0
2025-05-08 22:07:23,067 - flwr - INFO - 		round 30: 0.0
2025-05-08 22:07:23,067 - flwr - INFO - 		round 31: 0.0
2025-05-08 22:07:23,068 - flwr - INFO - 		round 32: 0.0
2025-05-08 22:07:23,068 - flwr - INFO - 		round 33: 0.0
2025-05-08 22:07:23,069 - flwr - INFO - 		round 34: 0.0
2025-05-08 22:07:23,070 - flwr - INFO - 		round 35: 0.0
2025-05-08 22:07:23,070 - flwr - INFO - 		round 36: 0.0
2025-05-08 22:07:23,071 - flwr - INFO - 		round 37: 0.0
2025-05-08 22:07:23,072 - flwr - INFO - 		round 38: 0.0
2025-05-08 22:07:23,073 - flwr - INFO - 		round 39: 0.0
2025-05-08 22:07:23,073 - flwr - INFO - 		round 40: 0.0
2025-05-08 22:07:23,074 - flwr - INFO - 		round 41: 0.0
2025-05-08 22:07:23,074 - flwr - INFO - 		round 42: 0.0
2025-05-08 22:07:23,075 - flwr - INFO - 		round 43: 0.0
2025-05-08 22:07:23,075 - flwr - INFO - 		round 44: 0.0
2025-05-08 22:07:23,076 - flwr - INFO - 		round 45: 0.0
2025-05-08 22:07:23,076 - flwr - INFO - 		round 46: 0.0
2025-05-08 22:07:23,077 - flwr - INFO - 		round 47: 0.0
2025-05-08 22:07:23,077 - flwr - INFO - 		round 48: 0.0
2025-05-08 22:07:23,077 - flwr - INFO - 		round 49: 0.0
2025-05-08 22:07:23,078 - flwr - INFO - 		round 50: 0.0
2025-05-08 22:07:23,079 - flwr - INFO - 	History (metrics, distributed, fit):
2025-05-08 22:07:23,079 - flwr - INFO - 	{'accuracy': [(1, 0.5621827244758606),
2025-05-08 22:07:23,079 - flwr - INFO - 	              (2, 0.5621827244758606),
2025-05-08 22:07:23,080 - flwr - INFO - 	              (3, 0.5621827244758606),
2025-05-08 22:07:23,080 - flwr - INFO - 	              (4, 0.5621827244758606),
2025-05-08 22:07:23,081 - flwr - INFO - 	              (5, 0.5621827244758606),
2025-05-08 22:07:23,081 - flwr - INFO - 	              (6, 0.5621827244758606),
2025-05-08 22:07:23,081 - flwr - INFO - 	              (7, 0.5621827244758606),
2025-05-08 22:07:23,082 - flwr - INFO - 	              (8, 0.5621827244758606),
2025-05-08 22:07:23,083 - flwr - INFO - 	              (9, 0.5621827244758606),
2025-05-08 22:07:23,083 - flwr - INFO - 	              (10, 0.5621827244758606),
2025-05-08 22:07:23,083 - flwr - INFO - 	              (11, 0.5621827244758606),
2025-05-08 22:07:23,084 - flwr - INFO - 	              (12, 0.5621827244758606),
2025-05-08 22:07:23,084 - flwr - INFO - 	              (13, 0.5621827244758606),
2025-05-08 22:07:23,085 - flwr - INFO - 	              (14, 0.5621827244758606),
2025-05-08 22:07:23,085 - flwr - INFO - 	              (15, 0.5621827244758606),
2025-05-08 22:07:23,086 - flwr - INFO - 	              (16, 0.5621827244758606),
2025-05-08 22:07:23,086 - flwr - INFO - 	              (17, 0.5621827244758606),
2025-05-08 22:07:23,087 - flwr - INFO - 	              (18, 0.5621827244758606),
2025-05-08 22:07:23,088 - flwr - INFO - 	              (19, 0.5621827244758606),
2025-05-08 22:07:23,088 - flwr - INFO - 	              (20, 0.5621827244758606),
2025-05-08 22:07:23,089 - flwr - INFO - 	              (21, 0.5621827244758606),
2025-05-08 22:07:23,090 - flwr - INFO - 	              (22, 0.5621827244758606),
2025-05-08 22:07:23,090 - flwr - INFO - 	              (23, 0.5621827244758606),
2025-05-08 22:07:23,090 - flwr - INFO - 	              (24, 0.5621827244758606),
2025-05-08 22:07:23,091 - flwr - INFO - 	              (25, 0.5621827244758606),
2025-05-08 22:07:23,092 - flwr - INFO - 	              (26, 0.5621827244758606),
2025-05-08 22:07:23,092 - flwr - INFO - 	              (27, 0.5621827244758606),
2025-05-08 22:07:23,092 - flwr - INFO - 	              (28, 0.5621827244758606),
2025-05-08 22:07:23,093 - flwr - INFO - 	              (29, 0.5621827244758606),
2025-05-08 22:07:23,093 - flwr - INFO - 	              (30, 0.5621827244758606),
2025-05-08 22:07:23,094 - flwr - INFO - 	              (31, 0.5621827244758606),
2025-05-08 22:07:23,094 - flwr - INFO - 	              (32, 0.5621827244758606),
2025-05-08 22:07:23,094 - flwr - INFO - 	              (33, 0.5621827244758606),
2025-05-08 22:07:23,095 - flwr - INFO - 	              (34, 0.5621827244758606),
2025-05-08 22:07:23,095 - flwr - INFO - 	              (35, 0.5621827244758606),
2025-05-08 22:07:23,096 - flwr - INFO - 	              (36, 0.5621827244758606),
2025-05-08 22:07:23,096 - flwr - INFO - 	              (37, 0.5621827244758606),
2025-05-08 22:07:23,096 - flwr - INFO - 	              (38, 0.5621827244758606),
2025-05-08 22:07:23,097 - flwr - INFO - 	              (39, 0.5621827244758606),
2025-05-08 22:07:23,097 - flwr - INFO - 	              (40, 0.5621827244758606),
2025-05-08 22:07:23,097 - flwr - INFO - 	              (41, 0.5621827244758606),
2025-05-08 22:07:23,098 - flwr - INFO - 	              (42, 0.5621827244758606),
2025-05-08 22:07:23,098 - flwr - INFO - 	              (43, 0.5621827244758606),
2025-05-08 22:07:23,099 - flwr - INFO - 	              (44, 0.5621827244758606),
2025-05-08 22:07:23,099 - flwr - INFO - 	              (45, 0.5621827244758606),
2025-05-08 22:07:23,100 - flwr - INFO - 	              (46, 0.5621827244758606),
2025-05-08 22:07:23,100 - flwr - INFO - 	              (47, 0.5621827244758606),
2025-05-08 22:07:23,100 - flwr - INFO - 	              (48, 0.5621827244758606),
2025-05-08 22:07:23,101 - flwr - INFO - 	              (49, 0.5621827244758606),
2025-05-08 22:07:23,101 - flwr - INFO - 	              (50, 0.5621827244758606)],
2025-05-08 22:07:23,102 - flwr - INFO - 	 'loss': [(1, 0.6898047924041748),
2025-05-08 22:07:23,102 - flwr - INFO - 	          (2, 0.6898046731948853),
2025-05-08 22:07:23,103 - flwr - INFO - 	          (3, 0.6898046135902405),
2025-05-08 22:07:23,103 - flwr - INFO - 	          (4, 0.6898046135902405),
2025-05-08 22:07:23,104 - flwr - INFO - 	          (5, 0.6898045539855957),
2025-05-08 22:07:23,105 - flwr - INFO - 	          (6, 0.6898045539855957),
2025-05-08 22:07:23,105 - flwr - INFO - 	          (7, 0.6898044347763062),
2025-05-08 22:07:23,106 - flwr - INFO - 	          (8, 0.6898043751716614),
2025-05-08 22:07:23,107 - flwr - INFO - 	          (9, 0.6898043155670166),
2025-05-08 22:07:23,107 - flwr - INFO - 	          (10, 0.6898041367530823),
2025-05-08 22:07:23,108 - flwr - INFO - 	          (11, 0.6898040771484375),
2025-05-08 22:07:23,108 - flwr - INFO - 	          (12, 0.6898040771484375),
2025-05-08 22:07:23,109 - flwr - INFO - 	          (13, 0.6898040771484375),
2025-05-08 22:07:23,109 - flwr - INFO - 	          (14, 0.6898038983345032),
2025-05-08 22:07:23,109 - flwr - INFO - 	          (15, 0.6898038983345032),
2025-05-08 22:07:23,110 - flwr - INFO - 	          (16, 0.6898038387298584),
2025-05-08 22:07:23,110 - flwr - INFO - 	          (17, 0.6898037791252136),
2025-05-08 22:07:23,110 - flwr - INFO - 	          (18, 0.6898036003112793),
2025-05-08 22:07:23,111 - flwr - INFO - 	          (19, 0.6898036003112793),
2025-05-08 22:07:23,111 - flwr - INFO - 	          (20, 0.689803421497345),
2025-05-08 22:07:23,112 - flwr - INFO - 	          (21, 0.6898033022880554),
2025-05-08 22:07:23,112 - flwr - INFO - 	          (22, 0.6898033618927002),
2025-05-08 22:07:23,112 - flwr - INFO - 	          (23, 0.6898031234741211),
2025-05-08 22:07:23,113 - flwr - INFO - 	          (24, 0.6898033022880554),
2025-05-08 22:07:23,113 - flwr - INFO - 	          (25, 0.6898032426834106),
2025-05-08 22:07:23,114 - flwr - INFO - 	          (26, 0.6898030638694763),
2025-05-08 22:07:23,114 - flwr - INFO - 	          (27, 0.6898030042648315),
2025-05-08 22:07:23,115 - flwr - INFO - 	          (28, 0.6898028254508972),
2025-05-08 22:07:23,115 - flwr - INFO - 	          (29, 0.689802885055542),
2025-05-08 22:07:23,116 - flwr - INFO - 	          (30, 0.6898027658462524),
2025-05-08 22:07:23,116 - flwr - INFO - 	          (31, 0.6898025870323181),
2025-05-08 22:07:23,117 - flwr - INFO - 	          (32, 0.6898026466369629),
2025-05-08 22:07:23,117 - flwr - INFO - 	          (33, 0.6898025274276733),
2025-05-08 22:07:23,118 - flwr - INFO - 	          (34, 0.6898024678230286),
2025-05-08 22:07:23,118 - flwr - INFO - 	          (35, 0.6898022890090942),
2025-05-08 22:07:23,119 - flwr - INFO - 	          (36, 0.6898022890090942),
2025-05-08 22:07:23,119 - flwr - INFO - 	          (37, 0.6898022294044495),
2025-05-08 22:07:23,120 - flwr - INFO - 	          (38, 0.6898022294044495),
2025-05-08 22:07:23,121 - flwr - INFO - 	          (39, 0.6898022294044495),
2025-05-08 22:07:23,122 - flwr - INFO - 	          (40, 0.6898021101951599),
2025-05-08 22:07:23,122 - flwr - INFO - 	          (41, 0.6898019909858704),
2025-05-08 22:07:23,123 - flwr - INFO - 	          (42, 0.6898018717765808),
2025-05-08 22:07:23,123 - flwr - INFO - 	          (43, 0.689801812171936),
2025-05-08 22:07:23,124 - flwr - INFO - 	          (44, 0.6898017525672913),
2025-05-08 22:07:23,124 - flwr - INFO - 	          (45, 0.6898015737533569),
2025-05-08 22:07:23,125 - flwr - INFO - 	          (46, 0.6898015141487122),
2025-05-08 22:07:23,125 - flwr - INFO - 	          (47, 0.6898015141487122),
2025-05-08 22:07:23,126 - flwr - INFO - 	          (48, 0.6898015141487122),
2025-05-08 22:07:23,126 - flwr - INFO - 	          (49, 0.6898013353347778),
2025-05-08 22:07:23,126 - flwr - INFO - 	          (50, 0.6898012757301331)]}
2025-05-08 22:07:23,127 - flwr - INFO - 
